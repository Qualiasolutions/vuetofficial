# Generated by Django 4.0.4 on 2023-09-22 15:10

import core.models.entities.base
import core.models.entities.lists
import core.models.users.user_models
import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields
import timezone_field.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, unique=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('dob', models.DateField(blank=True, null=True)),
                ('member_colour', models.CharField(blank=True, default='', max_length=10)),
                ('has_done_setup', models.BooleanField(default=False)),
                ('profile_image', models.FileField(blank=True, null=True, upload_to=core.models.users.user_models.user_profile_image_upload_location)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BlockedCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.IntegerField(choices=[(1, 'PETS'), (2, 'SOCIAL_INTERESTS'), (3, 'EDUCATION'), (4, 'CAREER'), (5, 'TRAVEL'), (6, 'HEALTH_BEAUTY'), (7, 'HOME'), (8, 'GARDEN'), (9, 'FOOD'), (10, 'LAUNDRY'), (11, 'FINANCE'), (12, 'TRANSPORT')])),
            ],
        ),
        migrations.CreateModel(
            name='Email',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('env', models.CharField(default='', max_length=20)),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('to', models.EmailField(max_length=200)),
                ('from_email', models.CharField(db_column='from', max_length=200)),
                ('html', models.TextField()),
                ('subject', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('name', models.CharField(max_length=200)),
                ('notes', models.CharField(blank=True, default='', max_length=1000)),
                ('category', models.IntegerField(blank=True)),
                ('hidden', models.BooleanField(blank=True, default=False)),
                ('subtype', models.CharField(blank=True, max_length=200)),
                ('image', models.FileField(blank=True, null=True, upload_to=core.models.entities.base.entity_image_upload_location)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='Family',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.FileField(blank=True, null=True, upload_to=core.models.users.user_models.family_image_upload_location)),
            ],
            options={
                'verbose_name_plural': 'families',
            },
        ),
        migrations.CreateModel(
            name='PlanningList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('category', models.IntegerField()),
                ('is_template', models.BooleanField(default=False)),
                ('members', models.ManyToManyField(related_name='planning_lists', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Recurrence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interval_length', models.IntegerField(blank=True, default=1, help_text='The number of periods between occurrences')),
                ('recurrence', models.CharField(choices=[('DAILY', 'Daily'), ('WEEKDAILY', 'Weekdaily'), ('WEEKLY', 'Weekly'), ('MONTHLY', 'Monthly'), ('MONTH_WEEKLY', 'Month-Weekly'), ('YEARLY', 'Yearly'), ('YEAR_MONTH_WEEKLY', 'Year-Month-Weekly'), ('MONTHLY_LAST_WEEK', 'Monthly-Last-Week')], max_length=20)),
                ('earliest_occurrence', models.DateTimeField(blank=True, help_text='\n            The earliest permitted occurrence of a task.\n            Tasks will not be generated before this time.\n        ', null=True)),
                ('latest_occurrence', models.DateTimeField(blank=True, help_text='\n            The latest permitted occurrence of a task.\n            Tasks will not be generated after this time.\n        ', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Routine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=127)),
                ('monday', models.BooleanField(blank=True, default=False)),
                ('tuesday', models.BooleanField(blank=True, default=False)),
                ('wednesday', models.BooleanField(blank=True, default=False)),
                ('thursday', models.BooleanField(blank=True, default=False)),
                ('friday', models.BooleanField(blank=True, default=False)),
                ('saturday', models.BooleanField(blank=True, default=False)),
                ('sunday', models.BooleanField(blank=True, default=False)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('members', models.ManyToManyField(related_name='routines', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SchoolYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('year', models.CharField(default='', max_length=63)),
                ('show_on_calendars', models.BooleanField(blank=True, default=False)),
            ],
        ),
        migrations.CreateModel(
            name='ShoppingList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('members', models.ManyToManyField(related_name='shopping_lists', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default=None, max_length=200)),
                ('type', models.CharField(blank=True, choices=[('TASK', 'Task'), ('APPOINTMENT', 'Appointment'), ('DUE_DATE', 'Due Date'), ('FLIGHT', 'Flight'), ('TRAIN', 'Train'), ('RENTAL_CAR', 'Rental Car'), ('TAXI', 'Taxi'), ('DRIVE_TIME', 'Drive Time'), ('HOTEL', 'Hotel'), ('STAY_WITH_FRIEND', 'Stay With Friend'), ('ACTIVITY', 'Activity'), ('FOOD_ACTIVITY', 'Food'), ('OTHER_ACTIVITY', 'Other Activity'), ('ANNIVERSARY', 'Anniversary'), ('BIRTHDAY', 'Birthday'), ('HOLIDAY', 'Holiday')], default='TASK', max_length=20)),
                ('location', models.CharField(blank=True, default='', max_length=200)),
                ('contact_name', models.CharField(blank=True, default='', max_length=200)),
                ('contact_email', models.CharField(blank=True, default='', max_length=200)),
                ('contact_no', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('notes', models.CharField(blank=True, default='', max_length=200)),
                ('hidden_tag', models.CharField(blank=True, choices=[('MOT_DUE', 'MOT'), ('INSURANCE_DUE', 'Insurance Due'), ('WARRANTY_DUE', 'Warranty Due'), ('SERVICE_DUE', 'Service Due'), ('TAX_DUE', 'Tax Due')], default='', max_length=20, null=True)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('PETS__FEEDING', 'Feeding'), ('PETS__EXERCISE', 'Exercise'), ('PETS__GROOMING', 'Grooming'), ('PETS__HEALTH', 'Health'), ('TRANSPORT__INFORMATION__PUBLIC', 'Transport public information'), ('FINANCE__INFORMATION__PUBLIC', 'Finance public information'), ('TRAVEL__INFORMATION__PUBLIC', 'Travel public information'), ('CAREER__INFORMATION__PUBLIC', 'Career public information'), ('SOCIAL_INTERESTS__INFORMATION__PUBLIC', 'Social public information'), ('HOME__INFORMATION__PUBLIC', 'Home public information'), ('GARDEN__INFORMATION__PUBLIC', 'Garden public information'), ('FOOD__INFORMATION__PUBLIC', 'Food public information'), ('LAUNDRY__INFORMATION__PUBLIC', 'Laundry public information'), ('SOCIAL_INTERESTS__BIRTHDAY', 'Birthday'), ('SOCIAL_INTERESTS__ANNIVERSARY', 'Anniversary'), ('SOCIAL_INTERESTS__HOLIDAY', 'Holiday I Celebrate')], max_length=200), blank=True, default=list, size=None)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('entities', models.ManyToManyField(blank=True, related_name='tasks', to='core.entity')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='TaskAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_timedelta', models.DurationField(default=datetime.timedelta(days=1), help_text='The time before a task at which the action needs to be taken')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actions', to='core.task')),
            ],
        ),
        migrations.CreateModel(
            name='TaskCompletionForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('completion_datetime', models.DateTimeField(auto_now_add=True)),
                ('recurrence_index', models.IntegerField(blank=True, null=True)),
                ('ignore', models.BooleanField(blank=True, default=False)),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_%(app_label)s.%(class)s_set+', to='contenttypes.contenttype')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='completion_form', to='core.task')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='AcademicPlan',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='Anniversary',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
                ('start_date', models.DateField(blank=True, null=True)),
                ('known_year', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='AnniversaryPlan',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='Boat',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
                ('make', models.CharField(max_length=100)),
                ('model', models.CharField(blank=True, default='', max_length=100)),
                ('registration', models.CharField(blank=True, default='', max_length=100)),
                ('date_registered', models.DateField(blank=True, null=True)),
                ('service_due_date', models.DateField(blank=True, null=True)),
                ('insurance_due_date', models.DateField(blank=True, null=True)),
                ('vehicle_type', models.CharField(blank=True, choices=[('BOAT', 'Boat'), ('OTHER', 'Other')], max_length=30, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='Car',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
                ('make', models.CharField(max_length=100)),
                ('model', models.CharField(blank=True, default='', max_length=100)),
                ('registration', models.CharField(blank=True, default='', max_length=100)),
                ('date_registered', models.DateField(blank=True, null=True)),
                ('service_due_date', models.DateField(blank=True, null=True)),
                ('insurance_due_date', models.DateField(blank=True, null=True)),
                ('vehicle_type', models.CharField(blank=True, choices=[('CAR', 'Car'), ('MOTORBIKE', 'Motorbike')], max_length=30, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='CareerGoal',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='DaysOff',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('description', models.CharField(blank=True, max_length=1000)),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='DriveTime',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
                ('carrier', models.CharField(blank=True, max_length=100)),
                ('contact_details', models.CharField(blank=True, default='', max_length=100)),
                ('booking_number', models.CharField(blank=True, max_length=100)),
                ('start_location', models.CharField(max_length=100)),
                ('end_location', models.CharField(max_length=100)),
                ('start_datetime', models.DateTimeField()),
                ('start_timezone', timezone_field.fields.TimeZoneField()),
                ('end_datetime', models.DateTimeField()),
                ('end_timezone', timezone_field.fields.TimeZoneField()),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
                ('start_datetime', models.DateTimeField()),
                ('end_datetime', models.DateTimeField()),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='EventSubentity',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='ExtracurricularPlan',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='Finance',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='FixedTask',
            fields=[
                ('task_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.task')),
                ('start_datetime', models.DateTimeField(blank=True, null=True)),
                ('end_datetime', models.DateTimeField(blank=True, null=True)),
                ('start_timezone', timezone_field.fields.TimeZoneField(blank=True, null=True)),
                ('end_timezone', timezone_field.fields.TimeZoneField(blank=True, null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('duration', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('core.task',),
        ),
        migrations.CreateModel(
            name='FixedTaskCompletionForm',
            fields=[
                ('taskcompletionform_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.taskcompletionform')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('core.taskcompletionform',),
        ),
        migrations.CreateModel(
            name='FlexibleTask',
            fields=[
                ('task_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.task')),
                ('earliest_action_date', models.DateField(blank=True, null=True)),
                ('due_date', models.DateField(blank=True, null=True)),
                ('duration', models.IntegerField(default=30)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('core.task',),
        ),
        migrations.CreateModel(
            name='FlexibleTaskCompletionForm',
            fields=[
                ('taskcompletionform_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.taskcompletionform')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('core.taskcompletionform',),
        ),
        migrations.CreateModel(
            name='Flight',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
                ('carrier', models.CharField(blank=True, max_length=100)),
                ('contact_details', models.CharField(blank=True, default='', max_length=100)),
                ('booking_number', models.CharField(blank=True, max_length=100)),
                ('start_location', models.CharField(max_length=100)),
                ('end_location', models.CharField(max_length=100)),
                ('start_datetime', models.DateTimeField()),
                ('start_timezone', timezone_field.fields.TimeZoneField()),
                ('end_datetime', models.DateTimeField()),
                ('end_timezone', timezone_field.fields.TimeZoneField()),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='FoodPlan',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='Garden',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='Groomer',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('email', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='HealthBeauty',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='HealthGoal',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='Hobby',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='Holiday',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
                ('string_id', models.CharField(blank=True, max_length=100)),
                ('country_code', models.CharField(blank=True, max_length=3)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('custom', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='HolidayPlan',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='Home',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
                ('address', models.CharField(blank=True, max_length=200, null=True)),
                ('residence_type', models.CharField(blank=True, choices=[('RESIDENCE', 'Residence'), ('SECOND_HOME', 'Second Home'), ('INVESTMENT', 'Investment')], max_length=30, null=True)),
                ('house_type', models.CharField(blank=True, choices=[('HOUSE', 'House'), ('APARTMENT', 'Apartment')], max_length=30, null=True)),
                ('has_outside_area', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='HotelOrRental',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
                ('address', models.CharField(blank=True, max_length=100)),
                ('contact_details', models.CharField(blank=True, max_length=100)),
                ('start_datetime', models.DateTimeField()),
                ('start_timezone', timezone_field.fields.TimeZoneField()),
                ('end_datetime', models.DateTimeField()),
                ('end_timezone', timezone_field.fields.TimeZoneField()),
                ('hotel_name', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='InsuranceCompany',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('email', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='InsurancePolicy',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
                ('account_number', models.CharField(blank=True, max_length=100)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.insurancecompany')),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='LaundryPlan',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='List',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='MicrochipCompany',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
                ('account_number', models.CharField(blank=True, max_length=100)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('email', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='PublicTransport',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='RentalCar',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
                ('carrier', models.CharField(blank=True, max_length=100)),
                ('contact_details', models.CharField(blank=True, default='', max_length=100)),
                ('booking_number', models.CharField(blank=True, max_length=100)),
                ('start_location', models.CharField(max_length=100)),
                ('end_location', models.CharField(max_length=100)),
                ('start_datetime', models.DateTimeField()),
                ('start_timezone', timezone_field.fields.TimeZoneField()),
                ('end_datetime', models.DateTimeField()),
                ('end_timezone', timezone_field.fields.TimeZoneField()),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
                ('address', models.CharField(blank=True, default='', max_length=300)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('email', models.CharField(blank=True, default='', max_length=100)),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='Sitter',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('email', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='SocialMedia',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='SocialPlan',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='StayWithFriend',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
                ('address', models.CharField(blank=True, max_length=100)),
                ('contact_details', models.CharField(blank=True, max_length=100)),
                ('start_datetime', models.DateTimeField()),
                ('start_timezone', timezone_field.fields.TimeZoneField()),
                ('end_datetime', models.DateTimeField()),
                ('end_timezone', timezone_field.fields.TimeZoneField()),
                ('friend_name', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='TaxiOrTransfer',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
                ('carrier', models.CharField(blank=True, max_length=100)),
                ('contact_details', models.CharField(blank=True, default='', max_length=100)),
                ('booking_number', models.CharField(blank=True, max_length=100)),
                ('start_location', models.CharField(max_length=100)),
                ('end_location', models.CharField(max_length=100)),
                ('start_datetime', models.DateTimeField()),
                ('start_timezone', timezone_field.fields.TimeZoneField()),
                ('end_datetime', models.DateTimeField()),
                ('end_timezone', timezone_field.fields.TimeZoneField()),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='TrainBusFerry',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
                ('carrier', models.CharField(blank=True, max_length=100)),
                ('contact_details', models.CharField(blank=True, default='', max_length=100)),
                ('booking_number', models.CharField(blank=True, max_length=100)),
                ('start_location', models.CharField(max_length=100)),
                ('end_location', models.CharField(max_length=100)),
                ('start_datetime', models.DateTimeField()),
                ('start_timezone', timezone_field.fields.TimeZoneField()),
                ('end_datetime', models.DateTimeField()),
                ('end_timezone', timezone_field.fields.TimeZoneField()),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='TravelPlan',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='Trip',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
                ('destination', models.CharField(blank=True, max_length=100)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='TripActivity',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
                ('type', models.CharField(blank=True, max_length=30)),
                ('address', models.CharField(blank=True, max_length=100)),
                ('contact_info', models.CharField(blank=True, max_length=100)),
                ('start_datetime', models.DateTimeField(blank=True, null=True)),
                ('start_timezone', timezone_field.fields.TimeZoneField(blank=True, null=True)),
                ('end_datetime', models.DateTimeField(blank=True, null=True)),
                ('end_timezone', timezone_field.fields.TimeZoneField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='Vet',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('email', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='Walker',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('email', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='UserInvite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, default='', max_length=50)),
                ('last_name', models.CharField(blank=True, default='', max_length=50)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('dob', models.DateField(blank=True, null=True)),
                ('member_colour', models.CharField(blank=True, default='', max_length=10)),
                ('rejected', models.BooleanField(default=False)),
                ('accepted', models.BooleanField(default=False)),
                ('family', models.ForeignKey(blank=True, help_text='The family to which a user has been invited. If `null` then it is a normal friend request.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_invites', to='core.family')),
                ('invitee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_invites', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TaskViewership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.task')),
            ],
        ),
        migrations.CreateModel(
            name='TaskReminder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timedelta', models.DurationField(default=datetime.timedelta(days=1), help_text='The time before a task at which the action needs to be taken')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reminders', to='core.task')),
            ],
        ),
        migrations.CreateModel(
            name='TaskMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.task')),
            ],
        ),
        migrations.CreateModel(
            name='TaskLimit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.IntegerField(choices=[(1, 'PETS'), (2, 'SOCIAL_INTERESTS'), (3, 'EDUCATION'), (4, 'CAREER'), (5, 'TRAVEL'), (6, 'HEALTH_BEAUTY'), (7, 'HOME'), (8, 'GARDEN'), (9, 'FOOD'), (10, 'LAUNDRY'), (11, 'FINANCE'), (12, 'TRANSPORT')])),
                ('minutes_limit', models.IntegerField(blank=True, null=True)),
                ('tasks_limit', models.IntegerField(blank=True, null=True)),
                ('interval', models.CharField(choices=[('DAILY', 'Daily'), ('MONTHLY', 'Monthly')], max_length=31)),
                ('user', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='task_limits', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TaskActionCompletionForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('completion_datetime', models.DateTimeField(auto_now_add=True)),
                ('recurrence_index', models.IntegerField(blank=True, null=True)),
                ('ignore', models.BooleanField(blank=True, default=False)),
                ('action', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='completion_forms', to='core.taskaction')),
            ],
        ),
        migrations.AddField(
            model_name='task',
            name='members',
            field=models.ManyToManyField(related_name='tasks', through='core.TaskMembership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='task',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_%(app_label)s.%(class)s_set+', to='contenttypes.contenttype'),
        ),
        migrations.AddField(
            model_name='task',
            name='routine',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tasks', to='core.routine'),
        ),
        migrations.CreateModel(
            name='ShoppingListStore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', max_length=200)),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='shopping_list_stores', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ShoppingListItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, default='', max_length=200)),
                ('checked', models.BooleanField(blank=True, default=False)),
                ('list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='core.shoppinglist')),
                ('store', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='items', to='core.shoppingliststore')),
            ],
        ),
        migrations.CreateModel(
            name='ShoppingListDelegation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('delegatee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_delegations', to=settings.AUTH_USER_MODEL)),
                ('delegator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_delegations', to=settings.AUTH_USER_MODEL)),
                ('list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='delegations', to='core.shoppinglist')),
                ('store', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='delegations', to='core.shoppingliststore')),
            ],
        ),
        migrations.CreateModel(
            name='SchoolTerm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=127)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('show_on_calendars', models.BooleanField(blank=True, default=False)),
                ('show_only_start_and_end', models.BooleanField(blank=True, default=True)),
                ('school_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='terms', to='core.schoolyear')),
            ],
        ),
        migrations.CreateModel(
            name='SchoolBreak',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=127)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('show_on_calendars', models.BooleanField(blank=True, default=False)),
                ('school_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='breaks', to='core.schoolyear')),
            ],
        ),
        migrations.CreateModel(
            name='ReferenceGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('PETS__FEEDING', 'Feeding'), ('PETS__EXERCISE', 'Exercise'), ('PETS__GROOMING', 'Grooming'), ('PETS__HEALTH', 'Health'), ('TRANSPORT__INFORMATION__PUBLIC', 'Transport public information'), ('FINANCE__INFORMATION__PUBLIC', 'Finance public information'), ('TRAVEL__INFORMATION__PUBLIC', 'Travel public information'), ('CAREER__INFORMATION__PUBLIC', 'Career public information'), ('SOCIAL_INTERESTS__INFORMATION__PUBLIC', 'Social public information'), ('HOME__INFORMATION__PUBLIC', 'Home public information'), ('GARDEN__INFORMATION__PUBLIC', 'Garden public information'), ('FOOD__INFORMATION__PUBLIC', 'Food public information'), ('LAUNDRY__INFORMATION__PUBLIC', 'Laundry public information'), ('SOCIAL_INTERESTS__BIRTHDAY', 'Birthday'), ('SOCIAL_INTERESTS__ANNIVERSARY', 'Anniversary'), ('SOCIAL_INTERESTS__HOLIDAY', 'Holiday I Celebrate')], max_length=200), blank=True, default=list, size=None)),
                ('name', models.CharField(max_length=127)),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_reference_groups', to=settings.AUTH_USER_MODEL)),
                ('entities', models.ManyToManyField(blank=True, related_name='reference_groups', to='core.entity')),
            ],
        ),
        migrations.CreateModel(
            name='Reference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=127)),
                ('value', models.CharField(max_length=255)),
                ('type', models.CharField(choices=[('NAME', 'Name'), ('ACCOUNT_NUMBER', 'Account number'), ('USERNAME', 'Username'), ('PASSWORD', 'Password'), ('WEBSITE', 'Website'), ('NOTE', 'Note'), ('ADDRESS', 'Address'), ('PHONE_NUMBER', 'Phone number'), ('DATE', 'Date'), ('OTHER', 'Other')], default='', max_length=127)),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_references', to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='references', to='core.referencegroup')),
            ],
        ),
        migrations.CreateModel(
            name='RecurrentTaskOverwrite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recurrence_index', models.IntegerField()),
                ('recurrence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recurrent_task_overwrite', to='core.recurrence')),
                ('task', models.OneToOneField(blank=True, help_text='If null then just deletes the occurrence', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recurrent_task_overwrite', to='core.task')),
            ],
        ),
        migrations.AddField(
            model_name='recurrence',
            name='task',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='recurrence', to='core.task'),
        ),
        migrations.CreateModel(
            name='PreferredDays',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.IntegerField(choices=[(1, 'PETS'), (2, 'SOCIAL_INTERESTS'), (3, 'EDUCATION'), (4, 'CAREER'), (5, 'TRAVEL'), (6, 'HEALTH_BEAUTY'), (7, 'HOME'), (8, 'GARDEN'), (9, 'FOOD'), (10, 'LAUNDRY'), (11, 'FINANCE'), (12, 'TRANSPORT')])),
                ('monday', models.BooleanField(blank=True, default=False)),
                ('tuesday', models.BooleanField(blank=True, default=False)),
                ('wednesday', models.BooleanField(blank=True, default=False)),
                ('thursday', models.BooleanField(blank=True, default=False)),
                ('friday', models.BooleanField(blank=True, default=False)),
                ('saturday', models.BooleanField(blank=True, default=False)),
                ('sunday', models.BooleanField(blank=True, default=False)),
                ('user', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='preferred_day_config', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PlanningSublist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, default='', max_length=200)),
                ('list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sublists', to='core.planninglist')),
            ],
        ),
        migrations.CreateModel(
            name='PlanningListItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, default='', max_length=200)),
                ('checked', models.BooleanField(blank=True, default=False)),
                ('sublist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='core.planningsublist')),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('recurrence_index', models.IntegerField(blank=True, null=True)),
                ('action', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='core.taskaction')),
                ('entity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='core.entity')),
                ('task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='core.task')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Friendship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_friendships', to=settings.AUTH_USER_MODEL)),
                ('friend', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accepted_friendships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('creator', 'friend')},
            },
        ),
        migrations.CreateModel(
            name='FamilyCategoryViewPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.IntegerField(choices=[(1, 'PETS'), (2, 'SOCIAL_INTERESTS'), (3, 'EDUCATION'), (4, 'CAREER'), (5, 'TRAVEL'), (6, 'HEALTH_BEAUTY'), (7, 'HOME'), (8, 'GARDEN'), (9, 'FOOD'), (10, 'LAUNDRY'), (11, 'FINANCE'), (12, 'TRANSPORT')])),
                ('user', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='family_category_view_permissions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EntityMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.entity')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='entity',
            name='members',
            field=models.ManyToManyField(related_name='entities', through='core.EntityMembership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entity',
            name='owner',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='owned_entities', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entity',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child_entities', to='core.entity'),
        ),
        migrations.AddField(
            model_name='entity',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_%(app_label)s.%(class)s_set+', to='contenttypes.contenttype'),
        ),
        migrations.CreateModel(
            name='CategorySetupCompletion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.IntegerField(blank=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='category_completions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('TASK_LIMIT_EXCEEDED', 'Task limit exceeded'), ('TASK_CONFLICT', 'Task conflict'), ('BLOCKED_DAY', 'Blocked day'), ('UNPREFERRED_DAY', 'Unpreferred day')], max_length=31)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='core.task')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ActionAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('TASK_LIMIT_EXCEEDED', 'Task limit exceeded'), ('TASK_CONFLICT', 'Task conflict'), ('BLOCKED_DAY', 'Blocked day'), ('UNPREFERRED_DAY', 'Unpreferred day')], max_length=31)),
                ('action', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='action_alerts', to='core.taskaction')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='action_alerts', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='family',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users', to='core.family'),
        ),
        migrations.AddField(
            model_name='user',
            name='friends',
            field=models.ManyToManyField(through='core.Friendship', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='AccommodationTask',
            fields=[
                ('fixedtask_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.fixedtask')),
                ('accommodation_name', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('core.fixedtask',),
        ),
        migrations.CreateModel(
            name='AnniversaryTask',
            fields=[
                ('fixedtask_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.fixedtask')),
                ('known_year', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('core.fixedtask',),
        ),
        migrations.CreateModel(
            name='Birthday',
            fields=[
                ('anniversary_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.anniversary')),
                ('first_name', models.CharField(default='', max_length=100)),
                ('last_name', models.CharField(default='', max_length=100)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('core.anniversary',),
        ),
        migrations.CreateModel(
            name='HolidayTask',
            fields=[
                ('fixedtask_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.fixedtask')),
                ('string_id', models.CharField(blank=True, default='', max_length=100)),
                ('country_code', models.CharField(blank=True, default='', max_length=3)),
                ('custom', models.BooleanField(blank=True, default=False)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('core.fixedtask',),
        ),
        migrations.CreateModel(
            name='TransportTask',
            fields=[
                ('fixedtask_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.fixedtask')),
                ('carrier', models.CharField(blank=True, max_length=100)),
                ('booking_number', models.CharField(blank=True, max_length=100)),
                ('flight_number', models.CharField(blank=True, max_length=100)),
                ('start_location', models.CharField(max_length=100)),
                ('end_location', models.CharField(max_length=100)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('core.fixedtask',),
        ),
        migrations.CreateModel(
            name='TripBlockedCategory',
            fields=[
                ('blockedcategory_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.blockedcategory')),
                ('user', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='trip_blocked_categories', to=settings.AUTH_USER_MODEL)),
            ],
            bases=('core.blockedcategory',),
        ),
        migrations.CreateModel(
            name='TermTimeBlockedCategory',
            fields=[
                ('blockedcategory_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.blockedcategory')),
                ('user', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='term_time_blocked_categories', to=settings.AUTH_USER_MODEL)),
            ],
            bases=('core.blockedcategory',),
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
                ('school_attended', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='students', to='core.school')),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.AddField(
            model_name='schoolyear',
            name='school',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='years', to='core.school'),
        ),
        migrations.CreateModel(
            name='Pet',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.entity')),
                ('type', models.CharField(blank=True, max_length=100)),
                ('breed', models.CharField(blank=True, max_length=100)),
                ('dob', models.DateField(blank=True, null=True)),
                ('microchip_number', models.CharField(blank=True, max_length=100)),
                ('insurance_policy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.insurancepolicy')),
                ('microchip_company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.microchipcompany')),
                ('pet_groomer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.groomer')),
                ('pet_sitter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.sitter')),
                ('pet_vet', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.vet')),
                ('pet_walker', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.walker')),
            ],
            options={
                'abstract': False,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='NationalHolidaysBlockedCategory',
            fields=[
                ('blockedcategory_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.blockedcategory')),
                ('user', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='national_holidays_blocked_categories', to=settings.AUTH_USER_MODEL)),
            ],
            bases=('core.blockedcategory',),
        ),
        migrations.CreateModel(
            name='ListEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, default='', max_length=200)),
                ('selected', models.BooleanField(default=False)),
                ('image', models.FileField(blank=True, null=True, upload_to=core.models.entities.lists.list_image_upload_location)),
                ('notes', models.CharField(blank=True, default='', max_length=2000)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='list_entries', to='core.list')),
            ],
            options={
                'verbose_name_plural': 'List Entries',
            },
        ),
        migrations.CreateModel(
            name='FamilyBirthdayBlockedCategory',
            fields=[
                ('blockedcategory_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.blockedcategory')),
                ('user', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='family_birthday_blocked_categories', to=settings.AUTH_USER_MODEL)),
            ],
            bases=('core.blockedcategory',),
        ),
        migrations.CreateModel(
            name='DaysOffBlockedCategory',
            fields=[
                ('blockedcategory_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.blockedcategory')),
                ('user', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='days_off_blocked_categories', to=settings.AUTH_USER_MODEL)),
            ],
            bases=('core.blockedcategory',),
        ),
        migrations.CreateModel(
            name='BirthdayBlockedCategory',
            fields=[
                ('blockedcategory_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.blockedcategory')),
                ('user', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='birthday_blocked_categories', to=settings.AUTH_USER_MODEL)),
            ],
            bases=('core.blockedcategory',),
        ),
        migrations.CreateModel(
            name='BirthdayTask',
            fields=[
                ('anniversarytask_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.anniversarytask')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(blank=True, default='', max_length=100)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('core.anniversarytask',),
        ),
    ]
