"""
Django settings for vuet project.

Generated by "django-admin startproject" using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import logging
import os
from datetime import timedelta
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / "subdir".
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")

# SECURITY WARNING: don"t run with debug turned on in production!
DEBUG = False if os.getenv("ENV") == "PROD" else True

ALLOWED_HOSTS = (
    ["vuet.app", "api.vuet.app", "web.vuet.app", ".vuet.app"]
    if os.getenv("ENV") == "PROD"
    else ["*"]
)

# Application definition


INSTALLED_APPS = [
    "polymorphic",
    "corsheaders",
    "django_filters",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "drf_yasg",
    "imagekit",
    "phonenumber_field",
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "storages",
    "vuet_auth",
    "core",
    "notifications",
    "subscriptions",
    "contact",
    "external_calendars",
]

if os.getenv("USE_SILK_PROFILING", "FALSE").upper() == "TRUE":
    INSTALLED_APPS.append("silk")
    SILKY_PYTHON_PROFILER = True


MIDDLEWARE = [
    "vuet.middleware.healthcheck.HealthCheckMiddleware",
    "vuet.middleware.handle_errors.HandleErrorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

if os.getenv("USE_SILK_PROFILING", "FALSE").upper() == "TRUE":
    MIDDLEWARE.append("silk.middleware.SilkyMiddleware")

ROOT_URLCONF = "vuet.urls"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {"class": "logging.StreamHandler"},
    },
    "loggers": {
        "": {  # "catch all" loggers by referencing it with the empty string
            "handlers": ["console"],
            "level": "DEBUG",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
}

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "vuet.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": "vuet",
        "USER": os.getenv("POSTGRES_USER"),
        "PASSWORD": os.getenv("POSTGRES_PASSWORD"),
        "HOST": os.getenv("POSTGRES_HOST"),
        "PORT": "5432",
    }
}

AUTH_USER_MODEL = "core.User"

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 8 if os.getenv("ENV") == "PROD" else 2,
        },
    }
]

# These are a few other password validators - I don"t think we care too much about these
# {
#     "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
# },
# {
#     "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
# },
# {
#     "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
# },


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = "/api-static/"
STATIC_ROOT = "/static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CORS_ORIGIN_ALLOW_ALL = True if os.getenv("ENV") == "LOCAL" else False
CORS_ORIGIN_WHITELIST = (
    ["https://web.vuet.app", "http://web.vuet.app"]
    if os.environ.get("ENV") == "PROD"
    else []
)

# django-storages
DEFAULT_FILE_STORAGE = "vuet.storage_backends.MediaStorage"

# Setting these to empty strings is fine - the ECS service has permissions
AWS_ACCESS_KEY_ID = ""
AWS_SECRET_ACCESS_KEY = ""
AWS_S3_ENDPOINT_URL = "http://localstack:4566" if os.getenv("ENV") == "LOCAL" else None
AWS_STORAGE_BUCKET_NAME = "vuet-media"

# Imagekit
IMAGEKIT_DEFAULT_IMAGE_CACHE_BACKEND = (
    "imagekit.imagecache.NonValidatingImageCacheBackend"
)
IMAGEKIT_DEFAULT_CACHEFILE_STRATEGY = "imagekit.cachefiles.strategies.Optimistic"

# TWILIO
TWILIO_ACCOUNT_SID = os.getenv("TWILIO_ACCOUNT_SID")
TWILIO_AUTH_TOKEN = os.getenv("TWILIO_AUTH_TOKEN")
TWILIO_FROM_NUMBER = os.getenv("TWILIO_FROM_NUMBER")

# Swagger
SWAGGER_SETTINGS = {
    "DEFAULT_FIELD_INSPECTORS": [
        "utils.yasg_inspectors.PolymorphicSerializerInspector",
        "drf_yasg.inspectors.CamelCaseJSONFilter",
        "drf_yasg.inspectors.ReferencingSerializerInspector",
        "drf_yasg.inspectors.RelatedFieldInspector",
        "drf_yasg.inspectors.ChoiceFieldInspector",
        "drf_yasg.inspectors.FileFieldInspector",
        "drf_yasg.inspectors.DictFieldInspector",
        "drf_yasg.inspectors.JSONFieldInspector",
        "drf_yasg.inspectors.HiddenFieldInspector",
        "drf_yasg.inspectors.RecursiveFieldInspector",
        "drf_yasg.inspectors.SerializerMethodFieldInspector",
        "drf_yasg.inspectors.SimpleFieldInspector",
        "drf_yasg.inspectors.StringDefaultFieldInspector",
    ],
}

SIMPLE_JWT = {
    "REFRESH_TOKEN_LIFETIME": timedelta(days=90),
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60)
    if os.getenv("ENV") == "LOCAL"
    else timedelta(minutes=5),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
}

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ]
}


# EMAIL
EMAIL_HOST = "email-smtp.eu-west-2.amazonaws.com"
EMAIL_PORT = 587
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
EMAIL_REDIRECT_ADDRESS = os.environ.get("EMAIL_REDIRECT_ADDRESS")
EMAIL_USE_TLS = True

ADMIN_EMAIL_ADDRESS = "contact@vuet.app"

CACHE_TIMEOUT = 60 * 60 * 24
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.filebased.FileBasedCache",
        "LOCATION": "/var/tmp/django_cache",
        "TIMEOUT": CACHE_TIMEOUT,
        "OPTIONS": {"MAX_ENTRIES": 1000},
    }
}


# PUSH NOTIFICATIONS
REMINDER_JOB_FREQUENCY = (
    60 * 5
)  # Every 5 minutes - should match the frequency in register_cron_jobs
